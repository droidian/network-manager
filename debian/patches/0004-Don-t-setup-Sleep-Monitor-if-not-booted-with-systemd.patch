From: Michael Biebl <biebl@debian.org>
Date: Sat, 12 Apr 2014 12:38:09 +0200
Subject: Don't setup Sleep Monitor if not booted with systemd

NetworkManager uses systemd for suspend/resume support. It listens for
the PrepareForSleep and Resume D-Bus signal sent by logind/systemd and
deactivates the interfaces on sleep and reactivates them on resume.
With a standalone logind we don't get a Resume signal and
NetworkManager remains in sleep mode where the devices are unmanaged.
As a workaround, skip the Sleep Monitor setup if not booted with
systemd.

Closes: #742933
---
 configure.ac                   | 3 ++-
 src/Makefile.am                | 2 ++
 src/nm-sleep-monitor-systemd.c | 5 +++++
 3 files changed, 9 insertions(+), 1 deletion(-)

--- a/configure.ac
+++ b/configure.ac
@@ -327,7 +327,8 @@
 case $with_suspend_resume in
     upower) ;;
     systemd)
-	PKG_CHECK_MODULES(SYSTEMD_INHIBIT, [libsystemd-login >= 183])
+	# Link against libsystemd-daemon for sd_booted()
+	PKG_CHECK_MODULES(SYSTEMD_INHIBIT, [libsystemd-login >= 183 libsystemd-daemon])
         ;;
     *)
 	AC_MSG_ERROR(--with-suspend-resume must be one of [upower, systemd])
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -304,6 +304,7 @@
 	$(LIBNL_CFLAGS) \
 	$(POLKIT_CFLAGS) \
 	$(SYSTEMD_LOGIN_CFLAGS) \
+	$(SYSTEMD_INHIBIT_CFLAGS) \
 	$(LIBSOUP_CFLAGS) \
 	$(AM_CPPFLAGS) \
 	-DBINDIR=\"$(bindir)\" \
@@ -346,6 +347,7 @@
 	$(LIBNL_LIBS) \
 	$(POLKIT_LIBS) \
 	$(SYSTEMD_LOGIN_LIBS) \
+	$(SYSTEMD_INHIBIT_LIBS) \
 	$(LIBSOUP_LIBS) \
 	$(LIBM) \
 	$(LIBDL)
--- a/src/nm-sleep-monitor-systemd.c
+++ b/src/nm-sleep-monitor-systemd.c
@@ -25,6 +25,7 @@
 #include <dbus/dbus-glib.h>
 #include <gio/gio.h>
 #include <gio/gunixfdlist.h>
+#include <systemd/sd-daemon.h>
 
 #include "nm-logging.h"
 #include "nm-dbus-manager.h"
@@ -304,6 +305,10 @@
 static void
 nm_sleep_monitor_init (NMSleepMonitor *self)
 {
+	if (!sd_booted()) {
+		nm_log_warn (LOGD_SUSPEND, "Skipping Sleep Monitor setup, system not booted with systemd");
+		return;
+	}
 	self->inhibit_fd = -1;
 	sleep_setup (self);
 	take_inhibitor (self);
