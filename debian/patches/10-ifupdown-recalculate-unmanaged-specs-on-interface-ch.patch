From e2941724ba71096d11897d2e191efc4c415eacb3 Mon Sep 17 00:00:00 2001
From: Dan Williams <dcbw@redhat.com>
Date: Tue, 7 May 2013 15:33:59 -0500
Subject: [PATCH 3/3] ifupdown: recalculate unmanaged specs on interface
 change (debian #707070)

If a kernel interface changes its MAC address, and NM is not
supposed to manage that interface, ifupdown needs to notice
that MAC address change and tell NM that the unmanaged devices
have changed, so that NM continues to not touch the device
after the MAC has changed.
---
 src/settings/plugins/ifupdown/plugin.c |   22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/src/settings/plugins/ifupdown/plugin.c b/src/settings/plugins/ifupdown/plugin.c
index 8c24b2c..a46ea2e 100644
--- a/src/settings/plugins/ifupdown/plugin.c
+++ b/src/settings/plugins/ifupdown/plugin.c
@@ -287,6 +287,26 @@ udev_device_removed (SCPluginIfupdown *self, GUdevDevice *device)
 }
 
 static void
+udev_device_changed (SCPluginIfupdown *self, GUdevDevice *device)
+{
+	SCPluginIfupdownPrivate *priv = SC_PLUGIN_IFUPDOWN_GET_PRIVATE (self);
+	const char *iface, *path;
+
+	iface = g_udev_device_get_name (device);
+	path = g_udev_device_get_sysfs_path (device);
+	if (!iface || !path)
+		return;
+
+	PLUGIN_PRINT("SCPlugin-Ifupdown", "device changed (path: %s, iface: %s)", path, iface);
+
+	if (!g_hash_table_lookup (priv->kernel_ifaces, iface))
+		return;
+
+	if (ALWAYS_UNMANAGE || priv->unmanage_well_known)
+		g_signal_emit_by_name (G_OBJECT (self), NM_SYSTEM_CONFIG_INTERFACE_UNMANAGED_SPECS_CHANGED);
+}
+
+static void
 handle_uevent (GUdevClient *client,
                const char *action,
                GUdevDevice *device,
@@ -306,6 +326,8 @@ handle_uevent (GUdevClient *client,
 		udev_device_added (self, device);
 	else if (!strcmp (action, "remove"))
 		udev_device_removed (self, device);
+	else if (!strcmp (action, "change"))
+		udev_device_changed (self, device);
 }
 
 static void
-- 
1.7.10.4

